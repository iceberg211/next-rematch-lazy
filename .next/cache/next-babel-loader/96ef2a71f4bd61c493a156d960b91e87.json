{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar counter = {\n  state: 0,\n  // initial state\n  reducers: {\n    // handle state changes with pure functions\n    increment: function increment(state, payload) {\n      return state + payload;\n    }\n  },\n  effects: {\n    // handle state changes with impure functions.\n    // use async/await for async actions\n    incrementAsync: function () {\n      var _incrementAsync = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(payload, rootState) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return new _Promise(function (resolve) {\n                  return setTimeout(resolve, 1000);\n                });\n\n              case 2:\n                this.increment(payload);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function incrementAsync(_x, _x2) {\n        return _incrementAsync.apply(this, arguments);\n      }\n\n      return incrementAsync;\n    }()\n  }\n};\nexport default counter;","map":{"version":3,"sources":["F:\\next\\with-rematch-app\\shared\\models\\counter.js"],"names":["counter","state","reducers","increment","payload","effects","incrementAsync","rootState","resolve","setTimeout"],"mappings":";;;AAAA,IAAMA,OAAO,GAAG;AACdC,EAAAA,KAAK,EAAE,CADO;AACJ;AACVC,EAAAA,QAAQ,EAAE;AACR;AACAC,IAAAA,SAFQ,qBAEGF,KAFH,EAEUG,OAFV,EAEmB;AACzB,aAAOH,KAAK,GAAGG,OAAf;AACD;AAJO,GAFI;AAQdC,EAAAA,OAAO,EAAE;AACP;AACA;AACMC,IAAAA,cAHC;AAAA;AAAA;AAAA,gDAGeF,OAHf,EAGwBG,SAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAIC,aAAY,UAAAC,OAAO;AAAA,yBAAIC,UAAU,CAACD,OAAD,EAAU,IAAV,CAAd;AAAA,iBAAnB,CAJD;;AAAA;AAKL,qBAAKL,SAAL,CAAeC,OAAf;;AALK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AARK,CAAhB;AAkBA,eAAeJ,OAAf","sourcesContent":["const counter = {\n  state: 0, // initial state\n  reducers: {\n    // handle state changes with pure functions\n    increment (state, payload) {\n      return state + payload\n    }\n  },\n  effects: {\n    // handle state changes with impure functions.\n    // use async/await for async actions\n    async incrementAsync (payload, rootState) {\n      await new Promise(resolve => setTimeout(resolve, 1000))\n      this.increment(payload)\n    }\n  }\n}\n\nexport default counter\n"]},"metadata":{},"sourceType":"module"}