{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"F:\\\\next\\\\with-rematch-app\\\\pages\\\\github-users.js\";\nimport React, { Component } from 'react';\nimport Link from 'next/link';\nimport withRematch from '../shared/withRematch';\nimport { checkServer } from '../shared/utils';\nimport CounterDisplay from '../shared/components/counter-display';\nimport Header from '../shared/components/header';\nimport github from '../shared/models/github';\n\nvar Github =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Github, _Component);\n\n  function Github() {\n    _classCallCheck(this, Github);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Github).apply(this, arguments));\n  }\n\n  _createClass(Github, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          isLoading = _this$props.isLoading,\n          fetchUsers = _this$props.fetchUsers,\n          userList = _this$props.userList;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, \" Github users \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, \"Server rendered github user list. You can also reload the users from the api by clicking the \", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, \"Get users\"), \" button below.\"), isLoading ? React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, \"Loading ...\") : null, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: fetchUsers,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, \"Get users\")), userList.map(function (user) {\n        return React.createElement(\"div\", {\n          key: user.login,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        }, React.createElement(Link, {\n          href: user.html_url,\n          passHref: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          height: \"45\",\n          width: \"45\",\n          src: user.avatar_url,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }, \" Username - \", user.login))), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }));\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }), React.createElement(CounterDisplay, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref) {\n        var isServer, store;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                isServer = _ref.isServer, store = _ref.store;\n\n                if (!isServer) {\n                  _context.next = 4;\n                  break;\n                }\n\n                _context.next = 4;\n                return store.dispatch.github.fetchUsers();\n\n              case 4:\n                return _context.abrupt(\"return\", {});\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return Github;\n}(Component);\n\nvar mapState = function mapState(state) {\n  return {\n    userList: state.github.users,\n    isLoading: state.github.isLoading\n  };\n};\n\nvar mapDispatch = function mapDispatch(_ref2) {\n  var _fetchUsers = _ref2.github.fetchUsers;\n  return {\n    fetchUsers: function fetchUsers() {\n      return _fetchUsers();\n    }\n  };\n};\n\nexport default withRematch(mapState, mapDispatch, github)(Github);","map":{"version":3,"sources":["F:\\next\\with-rematch-app\\pages\\github-users.js"],"names":["React","Component","Link","withRematch","checkServer","CounterDisplay","Header","github","Github","props","isLoading","fetchUsers","userList","map","user","login","html_url","avatar_url","isServer","store","dispatch","mapState","state","users","mapDispatch"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,SAASC,WAAT,QAA4B,iBAA5B;AACA,OAAOC,cAAP,MAA2B,sCAA3B;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;;IAGMC,M;;;;;;;;;;;;;6BAQK;AAAA,wBACqC,KAAKC,KAD1C;AAAA,UACCC,SADD,eACCA,SADD;AAAA,UACYC,UADZ,eACYA,UADZ;AAAA,UACwBC,QADxB,eACwBA,QADxB;AAGP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0GAE0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAF1B,mBAHF,EAOGF,SAAS,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAH,GAAwB,IAPpC,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,OAAO,EAAEC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,CARF,EAWGC,QAAQ,CAACC,GAAT,CAAa,UAAAC,IAAI;AAAA,eAChB;AAAK,UAAA,GAAG,EAAEA,IAAI,CAACC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,IAAD;AAAM,UAAA,IAAI,EAAED,IAAI,CAACE,QAAjB;AAA2B,UAAA,QAAQ,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAK,UAAA,MAAM,EAAC,IAAZ;AAAiB,UAAA,KAAK,EAAC,IAAvB;AAA4B,UAAA,GAAG,EAAEF,IAAI,CAACG,UAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAmBH,IAAI,CAACC,KAAxB,CAFF,CADF,CADF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAPF,CADgB;AAAA,OAAjB,CAXH,EAsBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAtBF,EAwBE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAxBF,CADF;AA4BD;;;;;;;;;;;;AAtC8BG,gBAAAA,Q,QAAAA,Q,EAAUC,K,QAAAA,K;;qBACnCD,Q;;;;;;uBACIC,KAAK,CAACC,QAAN,CAAeb,MAAf,CAAsBI,UAAtB,E;;;iDAED,E;;;;;;;;;;;;;;;;;;;EALUV,S;;AA0CrB,IAAMoB,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK;AAAA,SAAK;AACzBV,IAAAA,QAAQ,EAAEU,KAAK,CAACf,MAAN,CAAagB,KADE;AAEzBb,IAAAA,SAAS,EAAEY,KAAK,CAACf,MAAN,CAAaG;AAFC,GAAL;AAAA,CAAtB;;AAKA,IAAMc,WAAW,GAAG,SAAdA,WAAc;AAAA,MAAab,WAAb,SAAGJ,MAAH,CAAaI,UAAb;AAAA,SAAiC;AACnDA,IAAAA,UAAU,EAAE;AAAA,aAAMA,WAAU,EAAhB;AAAA;AADuC,GAAjC;AAAA,CAApB;;AAIA,eAAeR,WAAW,CACxBkB,QADwB,EAExBG,WAFwB,EAGxBjB,MAHwB,CAAX,CAIbC,MAJa,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport Link from 'next/link'\nimport withRematch from '../shared/withRematch'\nimport { checkServer } from '../shared/utils'\nimport CounterDisplay from '../shared/components/counter-display'\nimport Header from '../shared/components/header'\nimport github from '../shared/models/github';\n\n\nclass Github extends Component {\n  static async getInitialProps({ isServer, store }) {\n    if (isServer) {\n      await store.dispatch.github.fetchUsers()\n    }\n    return {}\n  }\n\n  render() {\n    const { isLoading, fetchUsers, userList } = this.props\n\n    return (\n      <div>\n        <Header />\n        <h1> Github users </h1>\n        <p>\n          Server rendered github user list. You can also reload the users from\n          the api by clicking the <b>Get users</b> button below.\n        </p>\n        {isLoading ? <p>Loading ...</p> : null}\n        <p>\n          <button onClick={fetchUsers}>Get users</button>\n        </p>\n        {userList.map(user => (\n          <div key={user.login}>\n            <Link href={user.html_url} passHref>\n              <a>\n                <img height='45' width='45' src={user.avatar_url} />\n                <span> Username - {user.login}</span>\n              </a>\n            </Link>\n            <br />\n          </div>\n        ))}\n        <br />\n\n        <CounterDisplay />\n      </div>\n    )\n  }\n}\n\nconst mapState = state => ({\n  userList: state.github.users,\n  isLoading: state.github.isLoading\n})\n\nconst mapDispatch = ({ github: { fetchUsers } }) => ({\n  fetchUsers: () => fetchUsers()\n})\n\nexport default withRematch(\n  mapState,\n  mapDispatch,\n  github\n)(Github)\n"]},"metadata":{},"sourceType":"module"}